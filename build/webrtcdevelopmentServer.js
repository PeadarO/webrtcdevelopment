exports.redisserver=function(){const a=require("redis-server");this.startRedisServer=function(){const b=new a(6379);b.open(a=>{}),b.close().then(()=>{})}};
exports.realtimecomm=function(a,b,c,d){function e(a){var b=h[a.userid],c={};b&&b.extra&&(c=b.extra),h[a.userid]={socket:a,connectedWith:{},isPublic:!1,extra:c||{}}}function f(a){function b(b){try{if(!h[b.sender])return void a.emit("user-not-found",b.sender);b.message.userLeft||h[b.sender].connectedWith[b.remoteUserId]||!h[b.remoteUserId]||(h[b.sender].connectedWith[b.remoteUserId]=h[b.remoteUserId].socket,h[b.sender].socket.emit("user-connected",b.remoteUserId),!h[b.remoteUserId]&&(h[b.remoteUserId]={socket:null,connectedWith:{},isPublic:!1,extra:{}}),h[b.remoteUserId].connectedWith[b.sender]=a,h[b.remoteUserId].socket&&h[b.remoteUserId].socket.emit("user-connected",b.sender)),h[b.sender].connectedWith[b.remoteUserId]&&h[a.userid]&&(b.extra=h[a.userid].extra,h[b.sender].connectedWith[b.remoteUserId].emit(f,b))}catch(a){pushLogs("onMessageCallback",a)}}var c=a.handshake.query,f=c.msgEvent||"RTCMultiConnection-Message";c.enableScalableBroadcast&&(!g&&(g=require("./Scalable-Broadcast.js")),g(a,c.maxRelayLimitPerUser));a.userid=c.userid,e(a),a.on("extra-data-updated",function(b){try{if(!h[a.userid])return;for(var c in h[a.userid].extra=b,h[a.userid].connectedWith)h[c].socket.emit("extra-data-updated",a.userid,b)}catch(a){pushLogs("extra-data-updated",a)}}),a.on("changed-uuid",function(b,d){if(d=d||function(){},c.dontUpdateUserId)return void delete c.dontUpdateUserId;try{if(h[a.userid]&&h[a.userid].socket.id==a.userid){if(b===a.userid)return;var f=a.userid;return h[b]=h[f],h[b].socket.userid=a.userid=b,delete h[f],void d()}a.userid=b,e(a),d()}catch(a){pushLogs("changed-uuid",a)}}),a.on("set-password",function(b){try{h[a.userid]&&(h[a.userid].password=b)}catch(a){pushLogs("set-password",a)}}),a.on("disconnect-with",function(b,c){try{if(h[a.userid]&&h[a.userid].connectedWith[b]&&(delete h[a.userid].connectedWith[b],a.emit("user-disconnected",b)),!h[b])return c();h[b].connectedWith[a.userid]&&(delete h[b].connectedWith[a.userid],h[b].socket.emit("user-disconnected",a.userid)),c()}catch(a){pushLogs("disconnect-with",a)}}),a.on("close-entire-session",function(b){try{var c=h[a.userid].connectedWith;Object.keys(c).forEach(function(b){if(c[b]&&c[b].emit)try{c[b].emit("closed-entire-session",a.userid,h[a.userid].extra)}catch(a){}}),delete k[a.userid],b()}catch(a){pushLogs("close-entire-session",a)}}),a.on("check-presence",function(b,c){if(b===a.userid&&!!h[b])return void c(!1,a.userid,h[b].extra);var d={};h[b]&&(d=h[b].extra),c(!!h[b],b,d)}),a.on("open-channel",function(b){console.log("------------open channel------------- ",b.channel," by ",b.sender);var c=null;b.channel?c=b.channel:console.log(" Err :  channel is empty"),0>m.indexOf(c)?(m.push(c),console.log("registered new in channels ",m)):console.log("channel already exists channels ",m);try{l[c]={channel:c,timestamp:new Date().toLocaleString(),maxAllowed:b.maxAllowed,users:[b.sender],status:"waiting",endtimestamp:0,log:[new Date().toLocaleString()+":-channel created . User "+b.sender+" waiting "]},console.log("information added to channel",l)}catch(a){console.log(" Err : info couldnt be aded to channel ",a)}var d={status:!0,channel:c};a.emit("open-channel-resp",d)}),a.on("open-channel-screenshare",function(b){console.log("------------open channel screenshare------------- ",b.channel," by ",b.sender);var c={status:!0,channel:b.channel};a.emit("open-channel-screenshare-resp",c)}),a.on("join-channel",function(b){var c=!1,d=b.channel;if((l[b.channel].users.length<l[b.channel].maxAllowed||"unlimited"==l[b.channel].maxAllowed)&&(c=!0),console.log("------------join channel------------- ",b.channel," by ",b.sender," isallowed ",c),c){l[b.channel].users.push(b.sender),l[b.channel].status=l[b.channel].users.length+" active members",l[b.channel].log.push(new Date().toLocaleString()+":-User "+b.sender+" joined the channel ");var e={status:!0,channel:b.channel,users:l[b.channel].users};a.emit("join-channel-resp",e);var f={status:!0,type:"new-join",msgtype:"success",data:b};a.broadcast.emit("channel-event",f)}else{console.warn(" Not aloowed to join channel , maxAllowed : ",l[b.channel].maxAllowed," current-users : ",l[b.channel].users.length);var e={status:!1,msgtype:"error",msg:"Sorry cant join this channel"};a.emit("join-channel-resp",e);var f={status:!0,type:"new-join",msgtype:"error",msg:"Another user is trying to join this channel but max count [ "+l[b.channel].maxAllowed+" ] is reached"};a.broadcast.emit("channel-event",f)}}),a.on("update-channel",function(a){switch(console.log("------------update channel------------- ",a.channel," by ",a.sender," -> ",a),a.type){case"change-userid":var b=l[a.channel].users.indexOf(a.extra.old);console.log("old userid",l[a.channel].users[b]),l[a.channel].users[b]=a.extra.new,console.log("changed userid",l[a.channel].users);break;default:console.log("do nothing ");}}),a.on("presence",function(b){var c=!!l[b.channel];console.log(" Presence Check index of ",b.channel," is ",c),a.emit("presence",c)}),a.on("admin_enquire",function(b){switch(b.ask){case"channels":b.find?a.emit("response_to_admin_enquire",module.getChannel(b.find,b.format)):a.emit("response_to_admin_enquire",module.getAllChannels(b.format));break;case"users":a.emit("response_to_admin_enquire",module.getAllActiveUsers(b.format));break;case"channel_clients":a.emit("response_to_admin_enquire",module.getChannelClients(b.channel));break;default:a.emit("response_to_admin_enquire","no case matched ");}});var n=0;a.on(f,function(c,d){if(!(c.remoteUserId&&c.remoteUserId===a.userid))try{if(c.remoteUserId&&"system"!=c.remoteUserId&&c.message.newParticipationRequest&&h[c.remoteUserId]&&h[c.remoteUserId].password){if(3<n)return void a.emit("password-max-tries-over",c.remoteUserId);if(!c.password)return n++,void a.emit("join-with-password",c.remoteUserId);if(c.password!=h[c.remoteUserId].password)return n++,void a.emit("invalid-password",c.remoteUserId,c.password)}if(c.message.shiftedModerationControl)return c.message.firedOnLeave?void(k[c.sender]=c):void b(c);if("system"==c.remoteUserId&&c.message.detectPresence)return c.message.userid===a.userid?void d(!1,a.userid):void d(!!h[c.message.userid],c.message.userid);if(h[c.sender]||(h[c.sender]={socket:a,connectedWith:{},isPublic:!1,extra:{}}),c.message.newParticipationRequest){var e=0;return void function d(){return e++,120<e?void a.emit("user-not-found",c.remoteUserId):h[c.remoteUserId]&&h[c.remoteUserId].socket?void b(c):void setTimeout(d,1e3)}()}b(c)}catch(a){pushLogs("on-socketMessageEvent",a)}}),a.on("disconnect",function(){try{delete a.namespace.sockets[this.id]}catch(a){pushLogs("disconnect",a)}try{var c=k[a.userid];c&&(delete k[c.userid],b(c))}catch(a){pushLogs("disconnect",a)}try{if(h[a.userid])for(var d in h[a.userid].connectedWith)h[a.userid].connectedWith[d].emit("user-disconnected",a.userid),h[d]&&h[d].connectedWith[a.userid]&&(delete h[d].connectedWith[a.userid],h[d].socket.emit("user-disconnected",a.userid))}catch(a){pushLogs("disconnect",a)}delete h[a.userid]}),d&&d(a)}var g,h={},k={},l={},m=[],n={},o=require("socket.io");try{o=o(a),o.set({transports:["websocket"]}),o.origins("*:*"),o.on("connection",f)}catch(a){console.error(" Realtime connection threw Exception ",a)}return module.getAll=function(a){var b=[];for(i in l)b.push(l[i]);return{response:"channels",channels:b,format:a}},module.getAllChannels=function(a){var b=[];for(i in Object.keys(l))b.push(Object.keys(l)[i]);return{response:"all",channelinfo:b,format:a}},module.getChannel=function(a,b){var c={response:"channel",channelinfo:l[a]?l[a]:null,format:b};return c},module.getAllActiveUsers=function(a){var b=[];for(i in Object.keys(l)){var c=Object.keys(l)[i];for(j in l[c].users)b.push(l[c].users[j])}return{response:"users",users:b,format:a}},module.getUser=function(a,b){var c={response:"users",users:n[a]?n[a]:"notfound",format:b};return c},module.getChannelClients=function(a){var b={response:"users",clients:o.of("/"+a).clients(),format:data.format};return b},console.log("----------------realtimecomm----------------------"),console.log(" Socket.io env => "+b.enviornment+" running at\n "+b.httpsPort),module};var enableLogs=!1;try{var _enableLogs=require("./config.json").enableLogs;_enableLogs&&(enableLogs=!0)}catch(a){enableLogs=!1}var fs=require("fs");function pushLogs(){if(enableLogs){var a=process.cwd()+"/logs.json",b=new Date().toUTCString().replace(/ |-|,|:|\./g,"");uncache(a);var c={};try{c=require(a)}catch(a){}arguments[1]&&arguments[1].stack&&(arguments[1]=arguments[1].stack);try{c[b]=JSON.stringify(arguments,null,"\t"),fs.writeFileSync(a,JSON.stringify(c,null,"\t"))}catch(a){c[b]=arguments.toString()}}}function uncache(a){searchCache(a,function(a){delete require.cache[a.id]}),Object.keys(module.constructor._pathCache).forEach(function(b){0<b.indexOf(a)&&delete module.constructor._pathCache[b]})}function searchCache(a,b){var c=require.resolve(a);c&&(c=require.cache[c])!==void 0&&function a(c){c.children.forEach(function(b){a(b)}),b(c)}(c)}
exports.restapi=function(a,b,c,d){var e=require("restify"),f=e.createServer(b);return f.use(function(a,b,c){return b.header("Access-Control-Allow-Origin","*"),b.header("Access-Control-Allow-Headers","X-Requested-With"),c()}),f.use(e.plugins.acceptParser(f.acceptable)),f.use(e.plugins.dateParser()),f.use(e.plugins.queryParser()),f.use(e.plugins.bodyParser({mapParams:!0})),f.get("/webrtc/details",function(a,b){console.log("params----------",a.params),b.json({type:!0,data:a.params.version})}),f.get("/session/all-sessions",function(b,c){var d=a.getAllChannels("json");c.json({type:!0,data:d})}),f.get("/session/getsession/:channelid",function(b,c){if(console.log(" [ Rest api - getSession ]  logs for ",b.params.channelid),!b.params.channelid)return void c.json({type:!0,data:"channelid is required"});var d=a.getChannel(b.params.channelid,"json");c.json({type:!0,data:d})}),f.get("/session/clients",function(b,c){var d=a.getChannelClients("json");c.json({type:!0,data:d})}),f.get("/user/all-users",function(b,c){var d=a.getAllActiveUsers("json");c.json({type:!0,data:d})}),f.get("/user/getuser/:userid",function(b,c){if(console.log(" [ Rest api - getUser ]  logs for ",b.params.userid),!b.params.userid)return void c.json({type:!0,data:"userid is required"});var d=a.getUser(b.params.userid,"json");c.json({type:!0,data:d})}),f.on("MethodNotAllowed",function(a,b){if("options"===a.method.toLowerCase()){return-1===b.methods.indexOf("OPTIONS")&&b.methods.push("OPTIONS"),b.header("Access-Control-Allow-Credentials",!0),b.header("Access-Control-Allow-Headers",["Accept","Accept-Version","Content-Type","Api-Version","Origin","X-Requested-With"].join(", ")),b.header("Access-Control-Allow-Methods",b.methods.join(", ")),b.header("Access-Control-Allow-Origin",a.headers.origin),b.send(204)}return b.send(new e.MethodNotAllowedError)}),f.listen(d.restPort,function(){console.log("%s listening at %s",f.name,f.url)}),console.log("----------------------REST APIs ----------------"),console.log(" REST server env => "+d.enviornment+" running at\n "+d.restPort),module};